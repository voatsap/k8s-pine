# Namespace-based NetworkPolicy Examples
# These policies control traffic between different namespaces

---
# Allow traffic from specific namespaces
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-from-frontend-namespace
  namespace: backend
spec:
  # Apply to all pods in backend namespace
  podSelector: {}
  
  policyTypes:
  - Ingress
  
  ingress:
  # Allow traffic from frontend namespace
  - from:
    - namespaceSelector:
        matchLabels:
          name: frontend
    ports:
    - protocol: TCP
      port: 8080

---
# Allow traffic from multiple namespaces
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-from-multiple-namespaces
  namespace: shared-services
spec:
  podSelector:
    matchLabels:
      app: shared-api
  
  policyTypes:
  - Ingress
  
  ingress:
  # Allow from development namespace
  - from:
    - namespaceSelector:
        matchLabels:
          environment: development
  # Allow from staging namespace  
  - from:
    - namespaceSelector:
        matchLabels:
          environment: staging
  # Allow from production namespace
  - from:
    - namespaceSelector:
        matchLabels:
          environment: production
    ports:
    - protocol: TCP
      port: 443

---
# Deny cross-namespace traffic (namespace isolation)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: deny-cross-namespace
  namespace: production
spec:
  # Apply to all pods in production namespace
  podSelector: {}
  
  policyTypes:
  - Ingress
  - Egress
  
  ingress:
  # Only allow traffic from same namespace
  - from:
    - podSelector: {}  # Empty selector = all pods in same namespace
  
  egress:
  # Only allow traffic to same namespace
  - to:
    - podSelector: {}  # Empty selector = all pods in same namespace
  # Allow DNS resolution (usually needed)
  - to: []
    ports:
    - protocol: UDP
      port: 53
